# Generated by Django 5.1.6 on 2025-03-05 23:55

import app_models.models.constants
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import utils.common
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ServiceProposalCategory',
            fields=[
                ('uuid', models.CharField(default=utils.common.generate_uuid, editable=False, max_length=100, primary_key=True, serialize=False)),
                ('fr_name', models.CharField(max_length=50, unique=True)),
                ('fr_description', models.TextField()),
                ('en_name', models.CharField(max_length=50, unique=True)),
                ('en_description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ServiceProposalSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uuid', models.CharField(default=utils.common.generate_uuid, editable=False, max_length=100, primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.EmailField(default=None, max_length=254, null=True, unique=True)),
                ('phone', models.CharField(default=None, max_length=20, null=True, unique=True)),
                ('city', models.CharField(default=None, max_length=100, null=True)),
                ('district', models.CharField(default=None, max_length=100, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ServiceProposal',
            fields=[
                ('uuid', models.CharField(default=utils.common.generate_uuid, editable=False, max_length=100, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('hourly_rate', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='proposals', to='app_models.serviceproposalcategory')),
                ('skills', models.ManyToManyField(to='app_models.serviceproposalskill')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceRequest',
            fields=[
                ('uuid', models.CharField(default=utils.common.generate_uuid, editable=False, max_length=100, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('active', 'active'), ('archived', 'archived'), ('closed', 'closed')], default=app_models.models.constants.ServiceRequestStatus['ACTIVE'], max_length=20)),
                ('city', models.CharField(max_length=100)),
                ('district', models.CharField(max_length=100)),
                ('duration', models.IntegerField()),
                ('fixed_amount', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_requests', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ServiceRequestSocials',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(default=None, max_length=254, null=True)),
                ('phone', models.CharField(default=None, max_length=20, null=True)),
                ('whatsapp', models.CharField(default=None, max_length=20, null=True)),
                ('telegram', models.CharField(default=None, max_length=20, null=True)),
                ('service_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='app_models.servicerequest')),
            ],
        ),
        migrations.CreateModel(
            name='UserSocials',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('whatsapp', models.CharField(default=None, max_length=20, null=True)),
                ('telegram', models.CharField(default=None, max_length=20, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='socials', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
